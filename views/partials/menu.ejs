<!-- Outer container for sticky positioning and full-width background -->
<!-- Added pr-4 for consistent right padding -->
<div class="sticky top-0 z-[99] bg-gray-100 w-full pl-16 pr-4 lg:pl-[14vw]">
    <!-- Inner container for max-width, centering -->
    <div class="header-content max-w-6xl 2xl:max-w-screen-xl mx-auto flex items-center pt-[2vh] pb-[1vh]">

        <!-- Page Title Container -->
        <div class="posts-title-container bg-white p-[2px] pl-4 text-left mt-[0] shadow-md rounded-[15px] h-[50px] flex items-center flex-grow overflow-hidden">
            <h3 class="posts-title font-semibold text-base text-gray-800 ml-5 truncate">
                <%= headerTitle %> <!-- Corrected variable name -->
            </h3>
        </div>

        <!-- Chat Icon Container -->
        <!-- Added relative positioning to the container -->
        <div class="chat-search-container relative bg-white p-[2px] mt-[0] ml-[1vw] shadow-md rounded-[15px] w-14 lg:w-[6vw] h-[50px] flex justify-center items-center flex-shrink-0">
            <a href="/Chat" class="flex items-center justify-center w-full h-full">
                <img src="/img/email.png" alt="Chat Icon" class="icon w-5 h-auto">
                <!-- Global Unread Dot - Ensure it starts hidden -->
                <span id="global-chat-unread-dot" class="w-2.5 h-2.5 bg-blue-500 rounded-full absolute top-1.5 right-1.5 hidden"></span>
            </a>
        </div>

        <!-- User Login/Dropdown Container -->
        <!-- Removed pr-4 from here, handled by outer wrapper's pr-4 -->
        <div class="user-log-container relative bg-white p-[2px] mt-[0] ml-[1vw] shadow-md rounded-[15px] w-14 lg:w-[10vw] h-[50px] flex justify-center items-center flex-shrink-0 overflow-visible">
            <% if (user) { %>
                <!-- User is logged in: Dropdown -->
                <div class="user-dropdown relative cursor-pointer w-full h-full flex items-center justify-center" id="userDropdown">
                    <!-- User Icon and Name -->
                    <div class="user-container flex items-center justify-center px-2">
                        <img src="/img/user.png" alt="User Icon" class="user-icon-dropdown w-5 h-auto lg:mr-1.5">
                        <span class="login-text text-sm text-gray-800 truncate hidden lg:inline"><%= user.username %></span>
                    </div>
                    <!-- Dropdown Content -->
                    <div id="dropdownContent" class="dropdown-content hidden absolute top-full right-0 mt-1 w-auto min-w-[150px] bg-white shadow-lg rounded-lg z-[9999] py-1 transition-all duration-300 ease-out">
                        <a href="/ManageAccount" class="block px-4 py-2 text-sm text-gray-700 hover:bg-green-600 hover:text-white rounded-md mx-1">Manage Account</a>
                        <a href="/LogOut" class="block px-4 py-2 text-sm text-gray-700 hover:bg-green-600 hover:text-white rounded-md mx-1">Log Out</a>
                    </div>
                </div>
            <% } else { %>
                <!-- User is not logged in: Login Link -->
                <a href="/LogIn?redirect=<%= encodeURIComponent(currentPath || '/') %>" id="login-link" class="flex items-center justify-center w-full h-full text-decoration-none">
                    <div class="user-container flex items-center justify-center">
                        <img src="/img/user.png" alt="User Icon" class="user-icon w-5 h-auto lg:mr-1.5">
                        <span class="login-text text-sm font-medium text-gray-800 uppercase hidden lg:inline">LOG-IN</span>
                    </div>
                </a>
            <% } %>
        </div>
    </div> <!-- End Inner container -->
</div> <!-- End Outer container -->

<!-- Include Socket.IO Client - Make sure this is loaded only once per page -->
<!-- If Socket.IO is already loaded globally (e.g., in header/footer), you can remove this line -->
<script src="/socket.io/socket.io.js"></script>

<!-- Keep the existing JavaScript for dropdown toggle -->
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const userDropdown = document.getElementById("userDropdown");
        const dropdownContent = document.getElementById("dropdownContent");

        // Only add event listeners if userDropdown exists (i.e., user is logged in)
        if (userDropdown && dropdownContent) {
            // Toggle dropdown on click
            userDropdown.addEventListener("click", function(event) {
                event.stopPropagation(); // Prevent click from closing the dropdown immediately
                // Toggle the 'hidden' class
                dropdownContent.classList.toggle("hidden");
                // Optional: Add classes for animation if desired
                if (!dropdownContent.classList.contains('hidden')) {
                    // Add classes for entry animation (e.g., opacity, transform)
                    // dropdownContent.classList.add('opacity-100', 'translate-y-0');
                    // dropdownContent.classList.remove('opacity-0', '-translate-y-2'); // Example starting state
                } else {
                    // Optional: Reset animation classes if needed
                    // dropdownContent.classList.remove('opacity-100', 'translate-y-0');
                    // dropdownContent.classList.add('opacity-0', '-translate-y-2');
                }
            });

            // Close dropdown if clicking outside of it
            document.addEventListener("click", function(event) {
                // Check if the dropdown exists and is not hidden before trying to close
                if (dropdownContent && !dropdownContent.classList.contains('hidden')) {
                    if (!userDropdown.contains(event.target)) {
                        dropdownContent.classList.add("hidden");
                         // Optional: Reset animation classes
                        // dropdownContent.classList.remove('opacity-100', 'translate-y-0');
                        // dropdownContent.classList.add('opacity-0', '-translate-y-2');
                    }
                }
            });
        }
    });
</script>

<!-- Script for Global Unread Chat Dot -->
<script>
    // --- ADD LOG ---
    console.log('[Menu Script] Script execution started.');
    // --- END LOG ---
    document.addEventListener('DOMContentLoaded', () => {
        // --- ADD LOG ---
        console.log('[Menu Script] DOMContentLoaded event fired.');
        // --- ADD MORE LOGS ---
        console.log('[Menu Script] Checking document.body:', document.body);
        console.log('[Menu Script] Checking document.body.dataset:', document.body.dataset);
        // --- CHANGE: Log the correct attribute ---
        console.log('[Menu Script] Checking document.body.dataset.userId raw value:', document.body.dataset.userId);
        // --- END CHANGE ---
        // --- END MORE LOGS ---

        const globalChatUnreadDot = document.getElementById('global-chat-unread-dot');
        // --- CHANGE: Read dataset.userId directly ---
        const currentUserId = document.body.dataset.userId || null; // Get ID string directly
        // --- REMOVE: No need to parse JSON just for the ID ---
        // const rawUserData = document.body.dataset.user; // Get raw string first
        // let currentUserData = null;
        // let currentUserId = null;
        //
        // // --- ADD: Attempt to parse user data ---
        // if (rawUserData && rawUserData !== 'null' && rawUserData !== 'undefined') {
        //     try {
        //         currentUserData = JSON.parse(rawUserData);
        //         currentUserId = currentUserData ? currentUserData._id : null;
        //         console.log('[Menu Script] Successfully parsed user data. User ID:', currentUserId);
        //     } catch (e) {
        //         console.error('[Menu Script] Failed to parse user data from body dataset:', e);
        //         console.error('[Menu Script] Raw data was:', rawUserData);
        //     }
        // } else {
        //     console.warn('[Menu Script] document.body.dataset.user is missing, null, or undefined.', `Raw value: ${rawUserData}`);
        // }
        // --- END REMOVE ---

        // --- Original log (now uses the direct value) ---
        // --- CHANGE: Update log message ---
        console.log('[Menu Script] currentUserId (from dataset.userId):', currentUserId);
        // --- END CHANGE ---
        // --- END LOG ---

        let isAuthenticated = false; // Flag to track authentication status
        let socket; // Define socket in a broader scope

        function updateDotVisibility(hasUnread) {
            // --- ADD LOG ---
            console.log(`[Global Unread DEBUG] updateDotVisibility called with hasUnread: ${hasUnread}. Current User: ${currentUserId}`);
            // --- END LOG ---
            if (!globalChatUnreadDot) {
                console.warn('[Global Unread] Dot element not found.');
                return;
            }
            // --- ADD LOG before class change ---
            console.log(`[Global Unread DEBUG] Dot element found. Current classes: ${globalChatUnreadDot.className}`);
            // --- END LOG ---
            if (hasUnread) {
                globalChatUnreadDot.classList.remove('hidden');
                // --- ADD LOG ---
                console.log('[Global Unread DEBUG] Dot should be VISIBLE. Classes after update:', globalChatUnreadDot.className);
                // --- END LOG ---
            } else {
                globalChatUnreadDot.classList.add('hidden');
                // --- ADD LOG ---
                console.log('[Global Unread DEBUG] Dot should be HIDDEN. Classes after update:', globalChatUnreadDot.className);
                // --- END LOG ---
            }
        }

        function checkUnreadStatus() {
            // console.log('[Global Unread] checkUnreadStatus called.');
            // --- ADD LOG ---
            console.log(`[Menu Script] checkUnreadStatus called. Socket defined: ${!!socket}, Connected: ${socket?.connected}, Authenticated: ${isAuthenticated}`);
            // --- END LOG ---
            // Ensure socket is defined and connected before emitting
            // --- MODIFIED CHECK: Ensure currentUserId is valid before proceeding ---
            if (socket && socket.connected && currentUserId && isAuthenticated) { // Check isAuthenticated flag AND currentUserId
            // --- END MODIFIED CHECK ---
                // --- ADD LOG before emit ---
                console.log(`[Global Unread DEBUG] Emitting 'checkGlobalUnread' for user ${currentUserId}. Socket ID: ${socket.id}`);
                // --- END LOG ---
                socket.emit('checkGlobalUnread');
            } else {
                // --- UPDATED LOG ---
                console.log('[Global Unread] Conditions not met for emitting checkGlobalUnread:', {
                    socketDefined: !!socket,
                    socketConnected: socket ? socket.connected : 'N/A',
                    hasUserId: !!currentUserId, // Check the parsed ID
                    isAuthenticated: isAuthenticated
                });
                // --- END UPDATED LOG ---
                // Ensure dot is hidden if conditions aren't met
                updateDotVisibility(false);
            }
        }

        // --- MODIFIED: Only initialize socket IF currentUserId was successfully obtained ---
        if (currentUserId) {
            console.log('[Menu Script] User ID found. Initializing socket...');
        // --- END MODIFIED ---
            // console.log('[Global Unread] User logged in, initializing socket.');
            // --- ADD LOG ---
            // console.log('[Menu Script] Initializing socket...'); // Moved log
            // --- END LOG ---
            socket = io(); // Initialize socket here

            socket.on('connect', () => {
                // console.log('[Global Unread] Socket connected.');
                // --- ADD LOG ---
                console.log('[Menu Script] Socket connect event received. Emitting authenticate...');
                // --- END LOG ---
                // Authenticate immediately on connect
                // console.log(`[Global Unread] Emitting authenticate for user: ${currentUserId}`);
                socket.emit('authenticate', currentUserId);
            });

            // --- Wait for Authentication Confirmation ---
            socket.on('auth_success', (data) => {
                // console.log(`[Global Unread] Received 'auth_success' for user ${data.userId}. Setting isAuthenticated = true.`);
                // --- ADD LOG ---
                console.log('[Menu Script] Received auth_success event. Setting isAuthenticated = true and attaching listeners.');
                // --- END LOG ---
                isAuthenticated = true; // Set flag

                // --- Perform initial check and setup listeners AFTER auth ---
                checkUnreadStatus(); // Perform the initial check now

                // Listener for server pushing updates
                socket.on('updateGlobalUnread', (data) => {
                    // --- ADD LOG ---
                    console.log(`[Global Unread DEBUG] Received 'updateGlobalUnread' event for user ${currentUserId}. Data:`, data);
                    // --- END LOG ---
                    if (typeof data.hasUnread === 'boolean') {
                        updateDotVisibility(data.hasUnread);
                    } else {
                        console.warn("[Global Unread] Received 'updateGlobalUnread' with invalid data format:", data);
                    }
                });

                // Listener for server requesting a re-check
                socket.on('triggerGlobalUnreadCheck', () => {
                    // --- ADD LOG ---
                    console.log(`[Global Unread DEBUG] Received 'triggerGlobalUnreadCheck' from server for user ${currentUserId}. Calling checkUnreadStatus.`);
                    // --- END LOG ---
                    checkUnreadStatus(); // Re-check status when triggered
                });

                // --- ADD: Listener for any new message ---
                socket.on('newMessage', (message) => {
                    // --- ADD LOG ---
                    console.log(`[Global Unread DEBUG] Received 'newMessage' event (Chat: ${message?.chat}) for user ${currentUserId}. Triggering checkUnreadStatus.`);
                    // --- END LOG ---
                    // No need to check *which* chat, just re-check the global status
                    checkUnreadStatus();
                });
                // --- END ADD ---

                // --- ADD: Listener for chat rename (might affect unread status if timestamp changes) ---
                socket.on('chatRenamed', (updatedChat) => {
                    // --- ADD LOG ---
                    console.log(`[Global Unread DEBUG] Received 'chatRenamed' event (Chat: ${updatedChat?._id}) for user ${currentUserId}. Triggering checkUnreadStatus.`);
                    // --- END LOG ---
                    checkUnreadStatus();
                });
                // --- END ADD ---

                // --- ADD: Listener for unarchive (might affect unread status) ---
                 socket.on('chatUnarchived', (unarchivedChat) => {
                    // --- ADD LOG ---
                    console.log(`[Global Unread DEBUG] Received 'chatUnarchived' event (Chat: ${unarchivedChat?._id}) for user ${currentUserId}. Triggering checkUnreadStatus.`);
                    // --- END LOG ---
                    checkUnreadStatus();
                 });
                // --- END ADD ---

                // --- ADD: Listener for member changes (might involve system messages affecting timestamp) ---
                socket.on('memberAdded', ({ chatId }) => {
                    // --- ADD LOG ---
                    console.log(`[Global Unread DEBUG] Received 'memberAdded' event (Chat: ${chatId}) for user ${currentUserId}. Triggering checkUnreadStatus.`);
                    // --- END LOG ---
                    checkUnreadStatus();
                });
                socket.on('memberRemoved', ({ chatId }) => {
                    // --- ADD LOG ---
                    console.log(`[Global Unread DEBUG] Received 'memberRemoved' event (Chat: ${chatId}) for user ${currentUserId}. Triggering checkUnreadStatus.`);
                    // --- END LOG ---
                    checkUnreadStatus();
                });
                // --- END ADD ---


                // --- End listeners setup ---
            });

            socket.on('auth_failure', (data) => {
                console.error(`[Global Unread] Authentication failed: ${data.error}`);
                // --- ADD LOG ---
                console.error('[Menu Script] Received auth_failure event.');
                // --- END LOG ---
                isAuthenticated = false;
                updateDotVisibility(false); // Hide dot on auth failure
            });
            // --- End Wait for Authentication Confirmation ---


            socket.on('disconnect', (reason) => {
                // console.log('[Global Unread] Socket disconnected:', reason);
                // --- ADD LOG ---
                console.log(`[Menu Script] Socket disconnect event received. Reason: ${reason}`);
                // --- END LOG ---
                isAuthenticated = false; // Reset flag on disconnect
                updateDotVisibility(false); // Hide dot on disconnect
            });

            socket.on('connect_error', (err) => {
                console.error('[Global Unread] Socket connection error:', err.message);
                // --- ADD LOG ---
                console.error('[Menu Script] Received connect_error event.');
                // --- END LOG ---
                isAuthenticated = false; // Reset flag on error
                updateDotVisibility(false); // Hide dot on connection error
            });

        } else { // This else block now correctly corresponds to currentUserId being null/missing
            // console.log('[Global Unread] User not logged in or user._id missing. Ensuring dot is hidden.');
            // --- ADD LOG ---
            console.log('[Menu Script] User not logged in or currentUserId missing. Skipping socket setup.'); // Log remains valid
            // --- END LOG ---
            // Ensure dot is hidden if user is not logged in
            if (globalChatUnreadDot && !globalChatUnreadDot.classList.contains('hidden')) {
                 globalChatUnreadDot.classList.add('hidden');
            }
        }
    });
</script>

